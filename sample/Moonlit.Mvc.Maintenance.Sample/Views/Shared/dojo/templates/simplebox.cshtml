@using Moonlit.Mvc
@using Moonlit.Mvc.Html 
@using Control = Moonlit.Mvc.Control
@using Form = Moonlit.Mvc.Controls.Form
@model Moonlit.Mvc.Templates.SimpleBoxTemplate

@{
    ViewBag.Title = "登录";
    ViewBag.TemplateName = "simplebox";
    Layout = "_html.cshtml";
    this.GetDojo()
        .AddRequire("dojox/form/Manager")
        .AddRequire("dojox/layout/ContentPane")
        .AddRequire("dijit/layout/BorderContainer");
}

<div data-dojo-type="dijit/layout/BorderContainer" data-dojo-props="gutters:false, liveSplitters:true" id="mainContainer">
    <div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="splitter:false, region:'top'" class="region-header">
        <div class="container" id="navbar">
            <div class="logo"></div>
            <a href="" class="logo-title">@Model.Site.Title</a>
            <div class="links">
                <a href="/">首页</a>
            </div>
        </div>
    </div>

    <div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'center'">
        <div data-dojo-type="dijit/layout/BorderContainer" data-dojo-props="gutters:false, liveSplitters:true" id="bodyContainer" class="container">

            <div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="splitter:false, region:'left'" style="width: 60%;">
                <div style="background:url(http://cdn.hizhanzhang.com/apps/maint/images/loginbg.jpg)" class="welcome-image"></div>
            </div>

            <div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'center'">
                <div class="form-horizontal" >
                    <form data-dojo-type="dojox/form/Manager" id="form" action="@Request.Url">
                        <div>请输入用户和密码登录</div>
                        @Html.Render(new Form()
                       {
                           Control = Model.Fields.Combine()
                       })
                        <div class="form-actions">
                            @foreach (Control button in Model.Buttons)
                            {
                                @Html.Render(button)
                            }
                        </div>
                        <div class="new-account">
                            @Html.Render(Model.Additional)
                        </div>
                    </form>

                </div>
                
            </div>
        </div>
    </div>
</div>
<script>
    function submit_form(value, name) {
        if (name) {
            // first time this method is called with no parameters
            // show the name and the value otherwise
            console.log("name = ", name, " value = ", value);
        }
    }

    require([@this.GetDojo().Requires(new [] { "dojo/parser", "dojo/json", "dojo/request", "dijit/registry","dojo/query", "dojo/domReady!" })],
        function (parser, JSON, request, registry, query) {
            parser.parse();
            query("form").on("submit", function (event) {
                event.preventDefault();
                event.stopPropagation();
                var form = registry.byNode(this);
                var data = form.gatherFormValues();
                debugger
                request.post(form.attr("action"), {
                    data: JSON.stringify(data),
                    headers: {
                        "Content-Type": "application/json"
                    }
                }).then(function (data) {
                    
                });
            });
            
            
        });
</script>
